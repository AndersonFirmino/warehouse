# Copyright 2013 Donald Stufft
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Added download_statistics table

Revision ID: 27f10b4acd27
Revises: 23515b7500af
Create Date: 2014-01-01 14:20:04.899624
"""
from __future__ import absolute_import, division, print_function

# revision identifiers, used by Alembic.
revision = '27f10b4acd27'
down_revision = '23515b7500af'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('downloads',
    sa.Column('id', postgresql.UUID(), server_default='uuid_generate_v4()', nullable=False),
    sa.Column('package_name', sa.UnicodeText(), nullable=False),
    sa.Column('package_version', sa.UnicodeText(), nullable=True),
    sa.Column('distribution_type', sa.Enum(u'sdist', u'wheel', u'exe', u'egg', u'msi', name='distribution_type'), nullable=True),
    sa.Column('python_type', sa.Enum(u'cpython', u'pypy', u'jython', u'ironpython', name='python_type'), nullable=True),
    sa.Column('python_release', sa.Text(), nullable=True),
    sa.Column('python_version', sa.Text(), nullable=True),
    sa.Column('installer_type', sa.Enum(u'browser', u'pip', u'setuptools', u'distribute', u'bandersnatch', u'z3c.pypimirror', u'pep381client', name='installer_type'), nullable=True),
    sa.Column('installer_version', sa.Text(), nullable=True),
    sa.Column('operating_system', sa.Text(), nullable=True),
    sa.Column('operating_system_version', sa.Text(), nullable=True),
    sa.Column('download_time', sa.DateTime(), nullable=False),
    sa.Column('raw_user_agent', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('openid_nonces')
    op.drop_table('oauth_access_tokens')
    op.drop_table('comments')
    op.drop_table('oauth_consumers')
    op.drop_table('cookies')
    op.drop_table('timestamps')
    op.drop_table('openids')
    op.drop_table('openid_discovered')
    op.drop_table('sshkeys')
    op.drop_table('oid_associations')
    op.drop_table('csrf_tokens')
    op.drop_table('accounts_gpgkey')
    op.drop_table('openid_whitelist')
    op.drop_table('release_requires_python')
    op.drop_table('oauth_nonce')
    op.drop_table('cheesecake_subindices')
    op.drop_table('release_urls')
    op.drop_table('dual')
    op.drop_table('browse_tally')
    op.drop_table('ratings')
    op.drop_table('comments_journal')
    op.drop_table('rego_otk')
    op.drop_table('mirrors')
    op.drop_table('oid_nonces')
    op.drop_table('oauth_request_tokens')
    op.drop_table('openid_sessions')
    op.alter_column('journals', 'id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default="nextval('journals_id_seq'::regclass)")
    op.drop_index('release_name_created_idx', 'releases')
    op.create_index('release_name_created_idx', 'releases', ['name', 'version'], unique=False)
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('release_name_created_idx', 'releases')
    op.create_index('release_name_created_idx', 'releases', ['name', 'created'], unique=False)
    op.alter_column('journals', 'id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default="nextval('journals_id_seq'::regclass)")
    op.create_table('openid_sessions',
    sa.Column('id', sa.INTEGER(), server_default="nextval('openid_sessions_id_seq'::regclass)", nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('assoc_handle', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('mac_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=u'openid_sessions_pkey')
    )
    op.create_table('oauth_request_tokens',
    sa.Column('token', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('secret', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('consumer', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('callback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.CIText(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_name'], [u'accounts_user.username'], name=u'oauth_request_tokens_user_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('token', name=u'oauth_request_tokens_pkey')
    )
    op.create_table('oid_nonces',
    sa.Column('server_url', sa.VARCHAR(length=2047), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salt', sa.CHAR(length=40), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('server_url', 'timestamp', 'salt', name=u'oid_nonces_pkey')
    )
    op.create_table('mirrors',
    sa.Column('ip', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('index_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_modified_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('local_stats_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stats_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mirrors_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_name'], [u'accounts_user.username'], name=u'mirrors_user_name_fkey'),
    sa.PrimaryKeyConstraint('ip', name=u'mirrors_pkey')
    )
    op.create_table('rego_otk',
    sa.Column('name', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('otk', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name'], [u'accounts_user.username'], name=u'rego_otk_name_fkey', ondelete=u'CASCADE')
    )
    op.create_table('comments_journal',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('submitted_by', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name', 'version'], [u'releases.name', u'releases.version'], name=u'comments_journal_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['submitted_by'], [u'accounts_user.username'], name=u'comments_journal_submitted_by_fkey', ondelete=u'CASCADE')
    )
    op.create_table('ratings',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.CIText(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default="nextval('ratings_id_seq'::regclass)", nullable=False),
    sa.ForeignKeyConstraint(['name', 'version'], [u'releases.name', u'releases.version'], name=u'ratings_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['user_name'], [u'accounts_user.username'], name=u'ratings_user_name_fkey', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('id', name=u'ratings_pkey')
    )
    op.create_table('browse_tally',
    sa.Column('trove_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tally', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('trove_id', name=u'browse_tally_pkey')
    )
    op.create_table('dual',
    sa.Column('dummy', sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.create_table('release_urls',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('packagetype', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name', 'version'], [u'releases.name', u'releases.version'], name=u'release_urls_name_fkey', onupdate=u'CASCADE')
    )
    op.create_table('cheesecake_subindices',
    sa.Column('main_index_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['main_index_id'], [u'cheesecake_main_indices.id'], name=u'cheesecake_subindices_main_index_id_fkey'),
    sa.PrimaryKeyConstraint('main_index_id', 'name', name=u'cheesecake_subindices_pkey')
    )
    op.create_table('oauth_nonce',
    sa.Column('timestamp', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('consumer', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('nonce', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=32), autoincrement=False, nullable=True)
    )
    op.create_table('release_requires_python',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('specifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name', 'version'], [u'releases.name', u'releases.version'], name=u'release_requires_python_name_fkey', onupdate=u'CASCADE')
    )
    op.create_table('openid_whitelist',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('trust_root', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', 'trust_root', name=u'openid_whitelist_pkey')
    )
    op.create_table('accounts_gpgkey',
    sa.Column('id', sa.INTEGER(), server_default="nextval('accounts_gpgkey_id_seq'::regclass)", nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('key_id', sa.CIText(), autoincrement=False, nullable=False),
    sa.Column('verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], [u'accounts_user.id'], name=u'accounts_gpgkey_user_id_fkey', initially=u'DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=u'accounts_gpgkey_pkey')
    )
    op.create_table('csrf_tokens',
    sa.Column('name', sa.CIText(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name'], [u'accounts_user.username'], name=u'csrf_tokens_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('name', name=u'csrf_tokens_pkey')
    )
    op.create_table('oid_associations',
    sa.Column('server_url', sa.VARCHAR(length=2047), autoincrement=False, nullable=False),
    sa.Column('handle', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('secret', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('issued', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lifetime', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assoc_type', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('server_url', 'handle', name=u'oid_associations_pkey')
    )
    op.create_table('sshkeys',
    sa.Column('id', sa.INTEGER(), server_default="nextval('sshkeys_id_seq'::regclass)", nullable=False),
    sa.Column('name', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name'], [u'accounts_user.username'], name=u'sshkeys_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('id', name=u'sshkeys_pkey')
    )
    op.create_table('openid_discovered',
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('services', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('op_endpoint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('op_local', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('url', name=u'openid_discovered_pkey')
    )
    op.create_table('openids',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.CIText(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name'], [u'accounts_user.username'], name=u'openids_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('id', name=u'openids_pkey')
    )
    op.create_table('timestamps',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=u'timestamps_pkey')
    )
    op.create_table('cookies',
    sa.Column('cookie', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('last_seen', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['name'], [u'accounts_user.username'], name=u'cookies_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('cookie', name=u'cookies_pkey')
    )
    op.create_table('oauth_consumers',
    sa.Column('consumer', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('secret', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('last_modified', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], [u'accounts_user.username'], name=u'oauth_consumers_created_by_fkey', onupdate=u'CASCADE'),
    sa.PrimaryKeyConstraint('consumer', name=u'oauth_consumers_pkey')
    )
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), server_default="nextval('comments_id_seq'::regclass)", nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_name', sa.CIText(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('in_reply_to', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['in_reply_to'], [u'comments.id'], name=u'comments_in_reply_to_fkey', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['rating'], [u'ratings.id'], name=u'comments_rating_fkey', ondelete=u'CASCADE'),
    sa.ForeignKeyConstraint(['user_name'], [u'accounts_user.username'], name=u'comments_user_name_fkey', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('id', name=u'comments_pkey')
    )
    op.create_table('oauth_access_tokens',
    sa.Column('token', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('secret', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('consumer', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('last_modified', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.CIText(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_name'], [u'accounts_user.username'], name=u'oauth_access_tokens_user_name_fkey', onupdate=u'CASCADE', ondelete=u'CASCADE'),
    sa.PrimaryKeyConstraint('token', name=u'oauth_access_tokens_pkey')
    )
    op.create_table('openid_nonces',
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('nonce', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.drop_table('downloads')
    ### end Alembic commands ###
